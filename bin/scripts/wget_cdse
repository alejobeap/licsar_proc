#!/bin/bash
# ML 2023
#this script will download a given file (zip file) from copernicus data space ecosystem (CDSE)

#token=$LiCSAR_configpath/cdse_token
#if [ ! -f $token ]; then token=~/.cdse_token; fi
#if [ ! -f $token ]; then
# echo "CDSE token not set, cancelling"
# echo "(please put the token to ~/.cdse_token)"
# exit
#fi
#ACCESS_TOKEN=`cat $token`

# OR:
if [ -f ~/.cdse_cred ]; then
  credfile=~/.cdse_cred
elif [ -f $LiCSAR_configpath/cdse_cred ]; then
  credfile=$LiCSAR_configpath/cdse_cred
else
  echo "no CDSE credentials found, exiting - please add user= and pass= variables to your ~/.cdse_cred file"
fi
source $credfile #$LiCSAR_configpath/cdse_cred


eof=0
if [ -z $1 ]; then echo "Parameter is the file name, e.g. S1A....zip"; exit; fi
if [ `echo $1 | grep -c zip` -eq 0 ]; then
 if [ `echo $1 | grep -c EOF` -eq 0 ]; then
  echo "Parameter is the file name, e.g. S1A....zip"; exit;
 else
  #echo "input is EOF file, ok";
  echo "downloading "$1
  eof=1
 fi
fi
if [ -z $2 ]; then outdir=.; else outdir=$2; fi

filename=$1
BN=`basename $filename .zip`

# trying ASF first anyway
cd $outdir; wget_alaska $filename;
if [ -f $filename ]; then
  if [ `ls -al $filename | gawk {'print $5'}` -gt 500000 ]; then
   echo "downloaded from ASF (instead of slower CDSE)"
   exit
  else
   rm $filename # as broken
  fi
fi

allok=1
function generate_new_token() {
  # this will create refresh token and return access token
  tokens=`curl -d 'client_id=cdse-public' -d 'username='$user -d 'password='$pass -d 'grant_type=password' 'https://identity.dataspace.copernicus.eu/auth/realms/CDSE/protocol/openid-connect/token' 2>/dev/null`
  ACCESS_TOKEN=`echo $tokens | python3 -m json.tool | grep "access_token" | awk -F\" '{print $4}'`
  REFRESH_TOKEN=`echo $tokens | python3 -m json.tool | grep "refresh_token" | awk -F\" '{print $4}'`
  echo $REFRESH_TOKEN > ~/.cdse_refresh_token
  echo $ACCESS_TOKEN
}

function refresh_the_token() {
	REFRESH_TOKEN=`cat ~/.cdse_refresh_token`
	tokens=`curl --location --request POST 'https://identity.dataspace.copernicus.eu/auth/realms/CDSE/protocol/openid-connect/token' \
  --header 'Content-Type: application/x-www-form-urlencoded' \
  --data-urlencode 'grant_type=refresh_token' \
  --data-urlencode 'refresh_token='$REFRESH_TOKEN \
  --data-urlencode 'client_id=cdse-public' 2>/dev/null`
  # maybe needed for new refresh token.. but... will ignore this for now:
  # REFRESH_TOKEN=`echo $tokens | python3 -m json.tool | grep "refresh_token" | awk -F\" '{print $4}'`
  # echo $REFRESH_TOKEN > ~/.cdse_refresh_token
  ACCESS_TOKEN=`echo $tokens | python3 -m json.tool | grep "access_token" | awk -F\" '{print $4}'`
  echo $ACCESS_TOKEN
}

# Playing with tokens
	if [ -f ~/.cdse_refresh_token ]; then
	 # use refresh token to regenerate access token
	 ACCESS_TOKEN=`refresh_the_token`
	else
	 ACCESS_TOKEN=`generate_new_token`
	fi

	if [ `echo $ACCESS_TOKEN | wc -m` -lt 2000 ]; then
	 echo "some error with CDSE tokening. Creating new ACCESS TOKEN"
	 ACCESS_TOKEN=`generate_new_token`
	fi

	if [ `echo $ACCESS_TOKEN | wc -m` -lt 2000 ]; then
	 echo "ERROR with CDSE - cannot get correct Access Token - cancelling CDSE"
	 echo "see yourself - the (wrong) ACCESS_TOKEN says:"
	 echo $ACCESS_TOKEN
	 allok=0
	 echo ""
	fi 


if [ $allok == 1 ]; then
	#get file ID
	#ID=`wget -O - "http://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel1/search.json?productIdentifier="$BN 2>/dev/null | jq '.properties.id' | sed 's/\"//g'`
	ID=`wget --no-hsts -O - "https://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel1/search.json?productIdentifier="$BN 2>/dev/null | jq '.features' | grep '"id"' | head -n 1 | cut -d '"' -f 4`
	# download to given outdir:
	#wget -O $outdir/$filename
	#sed -i 's/\r//' tmp_wget.txt 
	#ID=`grep "-" tmp_wget.txt`; rm tmp_wget.txt
	#if [ "$ID" == 'Id' -o "$ID" == "" ]; then#
		#>&2 echo Product with name \"$BN\" not found
	#exit 1
	#fi
	#URL="${HOST}/odata/v1/Products('$ID')/\$value"
	wget  --no-hsts --header "Authorization: Bearer $ACCESS_TOKEN" 'https://catalogue.dataspace.copernicus.eu/odata/v1/Products('$ID')/$value' -O $outdir/$filename 2>/dev/null
fi

if [ `ls -al $outdir/$filename | gawk {'print $5'}` -lt 10000 ]; then
 rm $outdir/$filename
 if [ $eof == 0 ]; then
   echo "error getting from CDSE, trying through ASF"
   cd $outdir
   wget_alaska $filename
   cd -
 else
   cd $outdir
   wget_alaska_eof $filename
   cd -
 fi
fi


