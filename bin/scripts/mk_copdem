#!/bin/bash

output=$1
# Input coordinate limits
west=$2
east=$3
south=$4
north=$5

# Round coordinates appropiately
west=`python -c "from math import ceil; print(ceil($west-1.25))" | awk '{printf "%.0f\n", $1}'`
east=`python -c "from math import floor; print(floor($east+1.25))" | awk '{printf "%.0f\n", $1}'`
south=`python -c "from math import ceil; print(ceil($south-1.25))" | awk '{printf "%.0f\n", $1}'`
north=`python -c "from math import floor; print(floor($north+1.25))" | awk '{printf "%.0f\n", $1}'`

AWK=awk
# Location of the GDEM files
DEMsDIR=${dems_dir}/COP30/COP30_hh
#srtm/srtm_1arcsec_filled_voids

# Cp srtm to working directory
for ((long=$west; long <= $east; long++)); do
  for ((lat=$south; lat <= $north; lat++)); do
    long1=$long
    lat1=$lat

    if [ $long1 -lt 0 ] && [ $lat1 -lt 0 ]; then 
      let "long1 = (( 0 - $long1 ))"
      let "lat1 = (( 0 - $lat1 ))"
      latstr='S'
      lonstr='W'
    elif [ $long1 -lt 0 ] && [ $lat1 -ge 0 ]; then
      let "long1 = (( 0 - $long1 ))"
      latstr='N'
      lonstr='W'
    elif [ $long1 -ge 0 ] && [ $lat1 -lt 0 ]; then
      let "lat1 = (( 0 - $lat1 ))"
      latstr='S'
      lonstr='E'
    elif [ $long1 -ge 0 ] && [ $lat1 -ge 0 ]; then
      latstr='N'
      lonstr='E'
    fi

   long1s=`echo $long1 | ${AWK} '{printf ("%03d",$1)}'`
   lat1s=`echo $lat1 | ${AWK} '{printf ("%02d",$1)}'`
   file=''
   file=`ls $DEMsDIR/Copernicus_DSM_COG_10_${latstr}${lat1s}'_00_'${lonstr}${long1s}'_00_DEM.tif' 2>/dev/null`
   #
   #file=`ls $DEMsDIR/${latstr}*${lat1s}/${lonstr}*/*${long1s}_DEM.tif 2>/dev/null`
   
   if [ -z $file ]; then
       let long2=$long1-1
       long2s=`echo $long2 | ${AWK} '{printf ("%03d",$1)}'`
       #file=`ls $DEMsDIR/${latstr}*${lat1s}/${lonstr}*/*${long2s}_DEM.tif 2>/dev/null`
       file=`ls $DEMsDIR/Copernicus_DSM_COG_10_${latstr}${lat1s}'_00_'${lonstr}${long2s}'_00_DEM.tif' 2>/dev/null`
   fi



    #echo "Copy file" $file "..."
    if [ ! -z $file ]; then
     if [ -f "$file" ]; then
      # copy tile
      ln -s ${file} 2>/dev/null
      #id=`basename $file .zip`
      #if [ -e "${id}.zip" ]; then
      #    echo "File found"
          #unzip -o ${file}.zip
      #    jar xf ${id}.zip
      #    rm ${id}.zip
      #    mv ${id}*/DEM/* .
      #fi
     else
      echo "File does not exist."
     fi
    fi

  done
done

# Merge all files and convert into a large geotif file (depend of GDAL)
# gdalwarp has poor performance adjusting the cache memory [e.g. 1Gb] performance increases
# see https://trac.osgeo.org/gdal/wiki/UserDocs/GdalWarp
#gdalwarp -multi --config GDAL_CACHEMAX 1000 -wm 1000 -overwrite -of GTiff `ls *_DEM.tif` ${output}.tif 2>/dev/null

#it was not working... but it does through gdal_merge:
rm ${output}.tif 2>/dev/null
gdal_merge.py -of GTiff -o ${output}.tif `ls *_DEM.tif` 


# Check gamma version to add geoid heights
#gammaversion=`srtm2dem 1&> tmp1 | cut -d 'A' -f2 | cut -d '/' -f2 1&> tmp1 ; awk '{if(NR==1) print substr($2,13,6)}' tmp1`
#if [ "$gammaversion" -lt "201507" ]; then
#  srtm2dem ${output}.tif ${output}.dem ${output}.dem_par
#else
  # Obtain the geoid height to input into srtm2dem program
  #center_coordinates=`gdalinfo ${output}_dem.tif | grep Center | awk '{print $3,$4}'`
  # http://geographiclib.sourceforge.net/cgi-bin/GeoidEval?input=36+14&option=Submit
  # http://geographiclib.sourceforge.net/1.28/geoid.html
  # http://geographiclib.sourceforge.net/1.28/index.html
  #geoid_height=0
  #srtm2dem ${output}.tif ${output}.dem ${output}.dem_par $geoid_height
  # 06/2021: importing DEM using dem_import, Copernicus DEM needs conversion from EGM2008 to WGS-84 ellipsoid heights, so..:
  dem_import ${output}.tif ${output}.dem ${output}.dem_par 0 1 $DIFF_HOME/scripts/egm2008-5.dem $DIFF_HOME/scripts/egm2008-5.dem_par 0
#fi

#rm -f ASTGTM*.tif
rm Cop*tif
rm srtm2dem.log ${output}.tif dem_import.log 2>/dev/null
