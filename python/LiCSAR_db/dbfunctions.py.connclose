#!/usr/bin/env python

import pymysql
from configparser import ConfigParser
import global_config as gc
import os
try:
    import sshtunnel
    sshtunnel.SSH_TIMEOUT = 5*60*60  #5 hours..
    sshtunnel.TUNNEL_TIMEOUT = sshtunnel.SSH_TIMEOUT
except:
    print('no ssh tunneling available')
    #print('problem importing sshtunnel module - ARC will have problems connecting to LiCSInfo db')
    #None
configfile = os.environ["LiCSARconfig"]

def Conn_db():
    # Returns the connection handle
    # Get DB connection info from config file
    parser = ConfigParser()
    parser.read(gc.configfile)
    sqlhost = parser.get('sqlinfo', 'host')
    sqldb = parser.get('sqlinfo', 'dbname')
    sqluser = parser.get('sqlinfo', 'dbuser')
    sqlpass = parser.get('sqlinfo', 'dbpass')

    try:
        # Connect to the database
        conn = pymysql.connect(host=sqlhost,
                               user=sqluser,
                               password=sqlpass,
                               db=sqldb)

        cur = conn.cursor()
        rc = conn.ping(reconnect=True) 
        cur.execute('SELECT VERSION();')
        res = cur.fetchone()
        # 09/2021: closing the connection, will always reconnect in scripts..
        conn.close()
        if not res:
            print("Error in database communication")
            return 'MYSQL ERROR'

    except pymysql.err.OperationalError as E:
        print('MySQL ERROR:\n%s\n' % E)
        conn = 'MYSQL ERROR'

    return conn


def Conn_tunnel_db():
    # Returns the connection handle for within ssh tunnel
    # Get DB connection info from config file
    parser = ConfigParser()
    parser.read(gc.configfile)
    sql_hostname = parser.get('sqlinfo', 'host')
    #sql_batch_database = parser.get('sqlinfo', 'dbbatchname')
    sql_live_database = parser.get('sqlinfo', 'dbname')
    sql_username = parser.get('sqlinfo', 'dbuser')
    sql_password = parser.get('sqlinfo', 'dbpass')
    sql_port = parser.get('sqlinfo', 'port')
    sql_port = int(sql_port)
    ssh_host = 'login-01.jasmin.ac.uk'
    #ssh_host = 'cems-login1.cems.rl.ac.uk'
    ssh_pkey = os.path.join(os.environ['HOME'],'.ssh/id_jasmin')
    if not os.path.exists(ssh_pkey):
        print('please install JASMIN RSA key to your ~/.ssh/id_jasmin')
        return None
    ssh_port = 22
    ssh_username = os.environ["USER"]
    tunnel = sshtunnel.SSHTunnelForwarder((ssh_host, ssh_port),
                ssh_username=ssh_username, ssh_pkey=ssh_pkey,
                remote_bind_address=(sql_hostname, sql_port))
    #if tunnel.tunnel_is_up:
    #    tunnel.stop()
    if not tunnel.tunnel_is_up:
        tunnel.start()  #this works, but in case of error it may be kept ON?
    
    try:
        conn = pymysql.connect(host='127.0.0.1',
                     user=sql_username,
                     passwd=sql_password,
                     database=sql_live_database,
                     port=tunnel.local_bind_port)
    except:
        print('WARNING! Error connecting to LiCSAR db - trying Leeds back up')
        tunnel.stop()
        parser = ConfigParser()
        parser.read(gc.configfile)
        sqlhost = parser.get('sqlinfo', 'host_bck')
        sqldb = parser.get('sqlinfo', 'dbname_bck')
        sqluser = parser.get('sqlinfo', 'dbuser_bck')
        sqlpass = parser.get('sqlinfo', 'dbpass_bck')

        conn = pymysql.connect(host=sqlhost,
                               user=sqluser,
                               password=sqlpass,
                               db=sqldb)
    rc = conn.ping(reconnect=True)
    cur = conn.cursor()
    cur.execute('SELECT VERSION();')
    res = cur.fetchone()
    conn.close()  # careful here - not tested well but this should be proper way
    if not res:
        print("Error in database communication")
        return 'MYSQL ERROR'
    return conn, tunnel
